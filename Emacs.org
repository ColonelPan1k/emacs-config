* Startup
** Use-package
#+BEGIN_SRC emacs-lisp
  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC
** Kill Startup Buffers
#+BEGIN_SRC emacs-lisp
  (setq-default message-log-max nil)
  (kill-buffer "*Messages*")
#+END_SRC
** All the Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
  (setq inhibit-compacting-font-cache t)
#+END_SRC
* Package Management
#+BEGIN_SRC emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

** Load Customs File
This sets a specific file to load

#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "lisp/custom.el"))
#+END_SRC
* Load-Path
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/init.el")
  (add-to-list 'load-path "~/.emacs.d/org-bullets")
  (add-to-list 'load-path "~/.emacs.d/lisp")
  (add-to-list 'load-path "~/.emacs.d/pylookup")
  (add-to-list 'load-path "~/.emacs.d/snippets")
  (load-file custom-file)
#+END_SRC
** Startup Performance
#+BEGIN_SRC emacs-lisp
;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+END_SRC

** Configure use-package
#+BEGIN_SRC emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)

; Always compile the newest version of packages
(use-package auto-compile
  :config (auto-compile-on-load-mode))

(setq load-prefer-newer t)

; Disable deprication warnings about cl functions
(setq byte-compile-warnings '(cl-functions))

; Auto-update packages
(use-package auto-package-update
  :ensure t
  :config
  (setq auto-package-update-delete-old-versions t))
#+END_SRC
** Load Sensible Defaults

This is a great default file from [[https://github.com/hrs][HRS]].  This has some seriously nice QOL improvements
that you might not think to add yourself.
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/lisp/sensible-defaults.el")
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
(sensible-defaults/backup-to-temp-directory)
#+END_SRC

* General Configuration
** User Information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Kyle Goldbeck"
        user-mail-address "kyle.goldbeck@gmail.com"
        calendar-latitude 42.361145
        calendar-longitude -71.057083
        calendar-location-name "Boston, MA")

#+END_SRC
** Case-insensitive Auto-Complete
There is really no good reason to use case-sensitive autocomplete.  If you're using Helm it
doesn't really matter, but I want to make sure it's really off.
#+BEGIN_SRC emacs-lisp
  (setq completion-ignore-case t)
  (setq read-buffer-completion-ignore-case t)
  (setq read-file-name-completion-ignore-case t)
#+END_SRC
** Backups and Lock Files
The Emacs default lock files seem to make a huge mess and have also
broken some applications that track file changes.  Maybe it's not smart
to turn off backups, but I save like crazy so I don't think it's really
an issue.

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq create-lockfiles nil)
#+END_SRC
* User Interface
** General UI Config
Clean up the UI and make it look more minimal.  These are some of the first options
anyone will set when configuring emacs.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t
	initial-buffer-choice nil)


  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)

  (menu-bar-mode -1)

  (setq ring-bell-function 'ignore)
  (setq visible-bell t)
  (setq global-hl-line-mode t)
#+END_SRC

Improve scrolling

#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(2 ((shift) . 2)))
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-follow-mouse 't) ; Scroll the window under the mouse
(setq scroll-step 2)
(setq use-dialog-box nil)
#+END_SRC

Enable line Numbers

#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode) ;; Global line numbers
  (add-hook 'prog-mode-hook 'electric-pair-mode)
  (remove-hook 'org-mode 'electric-pair-mode)
#+END_SRC

Hide startup splash screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t
        inhibit-scratch-message t)
  (setq initial-major-mode 'dashboard-mode)
#+END_SRC
** Tabs and Formatting
#+BEGIN_SRC emacs-lisp
  (setq tab-width 4)
  (defvaralias 'c-basic-offset 'tab-width)
#+END_SRC
** Theme

[[https://emacsthemes.com/][A nice gallery of Emacs themes if you're bored or want something new]]

Load my custom themes directory
#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
#+END_SRC

Load the current theme that I'm using. Suscolors and Seventies are also two
other themes I've used extensively in the past but Cyberpunk just looks the coolest.

#+BEGIN_SRC emacs-lisp
  (load-theme 'gruvbox-dark-medium t)
#+END_SRC
** Font
*** Set the font
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'default-frame-alist '(font . "Rec Mono Linear:pixelsize=20:foundry=ARRW:weight=normal:slant=normal:width=normal:spacing=100:scalable=true"))
  (set-face-attribute 'default nil :font "DejaVu Sans Mono" :height 160)
  (setq-default fill-column 80)
#+END_SRC
*** Enable proper Unicode glyph support
#+BEGIN_SRC emacs-lisp
  (defun dw/replace-unicode-font-mapping (block-name old-font new-font)
    (let* ((block-idx (cl-position-if
                           (lambda (i) (string-equal (car i) block-name))
                           unicode-fonts-block-font-mapping))
           (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
           (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
      (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
            `(,updated-block))))

  (use-package unicode-fonts
    :disabled
    :if (not dw/is-termux)
    :custom
    (unicode-fonts-skip-font-groups '(low-quality-glyphs))
    :config
    ;; Fix the font mappings to use the right emoji font
    (mapcar
      (lambda (block-name)
        (dw/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
      '("Dingbats"
        "Emoticons"
        "Miscellaneous Symbols and Pictographs"
        "Transport and Map Symbols"))
    (unicode-fonts-setup))
#+END_SRC
** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
** Smart-parens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode))
#+END_SRC

** Dashboard
Dashboard is probably my favorite emacs package.  It's great to give emacs a
proper, configurable splash screen with information you actually want to see.

Ensure Dashboard loads and is displayed when Emacs starts
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq dashboard-startup-banner "~/.emacs.d/img/magi.png")
  (setq dashboard-center-content t)
  (setq dashboard-show-shortcuts t)

  (setq dashboard-items '((recents . 7)
			  (agenda . 7)))

  (setq dashboard-item-shortcuts '((recents . "r")
				   (bookmarks . "m")
				   (agenda . "a")
				   (registers . "e")))

  (setq dashboard-week-agenda t)

  (setq dashboard-filter-agenda-entry 'dashboard-no-filter-agenda)

  (setq dashboard-banner-logo-title "")

  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
#+END_SRC
** Powerline
#+BEGIN_SRC emacs-lisp
  (require 'powerline)
  (powerline-default-theme)
  (custom-set-faces
   '(powerline-active0 ((t (:inherit mode-line :family "DejaVu Sans Mono"))))
   '(powerline-active1 ((t (:background "#103050" :foreground "#eaeaea" :family "DejaVu Sans Mono"))))
   '(powerline-inactive0 ((t (:family "DejaVu Sans Mono"))))
   '(powerline-inactive1 ((t (:background "grey11" :inherit mode-line-inactive :family "DejaVu Sans Mono"))))
   '(powerline-inactive2 ((t (:family "DejaVu Sans Mono" :background "grey20" :inherit mode-line-inactive))))
   )

#+END_SRC
* Default Coding System
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
* Key Bindings
** ESC Cancels All
I don't use this very much, but it's nice to include anyways.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC
** Faster change window
Using "C-x o" can get annoying after awhile, "M-o" is much easier
#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
#+end_src
** Open Config File
I edit my config file a lot.  It's nice to have a quick way to access it.
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/dev/Emacs_config/Emacs.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** Open Org-Todo File
I know there's already a keybinding `C-c a t'` for opening the org-todo menu,
but I have a lot of nested tasks within my daily TODOs so it's nice to have a
way to open the file quickly and save a few keystrokes

#+BEGIN_SRC emacs-lisp
  (defun open-todo ()
    (interactive)
    (find-file "~/Org-Files/todo.org"))

  (global-set-key (kbd "C-c t") 'open-todo)
#+END_SRC
** C-; Comments Line instead of C-x C-;
#+begin_src emacs-lisp
(global-set-key (kbd "C-;") 'comment-line)
#+end_src
* IDE Features
** Color-Identifiers-Mode
#+begin_src emacs-lisp
(add-hook 'after-init-hook 'global-color-identifiers-mode)
#+end_src
** Electric Operator
#+begin_src emacs-lisp
(use-package electric-operator
  :hook (python-mode . electric-operator-mode))
#+end_src
** Python
#+begin_src emacs-lisp
(use-package blacken
  :demand t
  :after python
  :hook (python-mode . blacken-mode))
#+end_src

Company Mode config
#+begin_src emacs-lisp
  (setq company-idle-delay
	(lambda () (if (company-in-string-or-comment) nil 0)))
  (setq company-require-match nil)
  (setq company-tooltip-align-annotations t)
  (setq company-tooltip-flip-when-above t)
  (setq company-dabbrev-minimum-length 2)
  (defun company-jedi-setup ()
    (add-to-list 'company-backends 'company-jedi))
  (add-hook 'python-mode-hook 'company-jedi-setup)

  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

#+begin_src emacs-lisp
(require 'flymake)

(defun flymake-python-mypy-init ()
  (let* ((temp-file (flymake-init-create-temp-buffer-copy
                     'flymake-create-temp-inplace))
         (local-file (file-relative-name
                      temp-file
                      (file-name-directory buffer-file-name))))
    (list "mypy" (list local-file))))

(add-to-list 'flymake-allowed-file-name-masks
             '("\\.py\\'" flymake-python-mypy-init))

(add-hook 'python-mode-hook 'flymake-mode)
#+end_src

#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
#+end_src


#+begin_src emacs-lisp
(require 'which-func)
(which-function-mode t)
#+end_src

#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'python-isort-on-save-mode)
  (add-hook 'python-mode-hook 'company-mode)
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
#+end_src

* Org-Mode
** General Settings
Startup org, set some important default locations, and add source block
hotkeys
#+BEGIN_SRC emacs-lisp
    (use-package org
      :defer t)
    (setq org-directory "~/Org-Files")

    (defun org-file-path (filename)
      (concat (file-name-as-directory org-directory) filename))

    (defconst org-archive-file "~/Org-Files/Archive/archive-2021.org")
    (defconst org-todo-file "~/Org-Files/todo.org")

    (setq org-agenda-files (list org-todo-file))

    (setq org-archive-location
	  (concat
	   (org-file-path (format "archive/archive-%s.org" (format-time-string "%Y")))
	   "::* From %s"))


    (with-eval-after-load 'org
      (require 'org-tempo)
      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
      (add-to-list 'org-structure-template-alist '("py" . "src python"))
      (add-to-list 'org-structure-template-alist '("js" . "src javascript"))
      (add-to-list 'org-structure-template-alist '("sc" . "src scheme")))
#+END_SRC

Disable electric-pair-mode for '<>' in org-mode.  This fixes source blocks.
#+begin_src emacs-lisp
  (add-hook
   'org-mode-hook
   (lambda ()
     (setq-local electric-pair-inhibit-predicate
		   `(lambda (c)
		      (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
#+end_src


Open an org-mode file with all buffers collapsed
#+begin_src emacs-lisp
  (setq org-startup-folded t)
#+end_src

Disable auto sub/superscript when exporting from org mode
#+begin_src emacs-lisp
  (setq org-export-with-sub-superscripts nil)
#+end_src

It's nice to hide emphasis markers but, depending on the font you're using, it
can be difficult to see where you've added a code block, italics, etc. so I have
this disabled for better readablity
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers nil)
#+end_src

Disable electric-indent-mode.  This is beyond annoying when trying to type anything that isn't code.
#+begin_src emacs-lisp
  (add-hook 'electric-indent-functions
	    (lambda (x) (when (eq'org-mode major-mode) 'no-indent)))
#+end_src

Custom keybind to stop a timer
#+begin_src emacs-lisp
(global-set-key (kbd "M-[") 'org-timer-stop)
#+end_src
** Org-Bullets
#+BEGIN_SRC emacs-lisp
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
** Key Bindings
#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
#+END_SRC
** Todo
#+BEGIN_SRC emacs-lisp
  (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))
#+END_SRC

Set org-todo-keywods, add any custom keywords here
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ; Record the time that a todo was archived
  (setq org-log-done 'time)

  ; Start weeks today
  (setq org-agenda-start-on-weekday nil)

  ; Show the next two weeks
  (setq org-agenda-span 14)
#+END_SRC
** Org LaTeX Settings
I don't work much in LaTeX anymore.  This is mostly a carryover from when I wrote
a lot of LaTeX.
#+BEGIN_SRC emacs-lisp
  (setq org-latex-default-package-alist '("" "minted"))

  ;; Native tab in source blocks
  (setq org-src-tab-acts-natively t)

  ;; Use syntax highlighting in source blocks
  (setq org-src-fontify-natively t)

  ;; Use the current window when editing a code snippet
  (setq org-src-window-setup 'current-window)

  ;; Don't indent newly expanded blocks
  (setq org-adapt-indentation nil)

  ;; Line wrapping
  (add-hook 'org-mode-hook
            '(lambda()
               (visual-line-mode 1)))
#+END_SRC
** Archiving
I love being able to archive TODOs.  The extra detail is also a nice touch.
There may be an issue with this command throwing an error relating to org-preserve-local-variables.

To fix this, see [[https://github.com/syl20bnr/spacemacs/issues/11801][this issue]]:
> Running =cd ~/emacs.d/elpa/develop; find org*/*.elc -print0 | xargs -0 rm= should fix the problem

#+BEGIN_SRC emacs-lisp
  (defun hrs/mark-done-and-archive ()
      "Mark the state of an org-mode item as DONE, archive it, and
  save the Org buffers."
      (interactive)
      (org-todo 'done)
      (org-archive-subtree)
      (org-save-all-org-buffers))

  (define-key org-mode-map (kbd "C-c C-x C-s") 'hrs/mark-done-and-archive)
#+END_SRC
** Org-Superstar

Set custom bullets for org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
#+END_SRC

** Org-Export-Backends
Enable markdown exporting and remove some of the other export formats I'll never use
#+BEGIN_SRC emacs-lisp
  (setq org-export-backends '(html latex md))
#+END_SRC
** Org-Export-Markdown Extension
This exports all top-level headings in an org document to separate markdown files
eg:
#+begin_example
| * A
| * B
| * C
#+end_example
will export =A.md, B.md, C.md=
#+begin_src emacs-lisp
  ;; Credit to @Ashraz in the SystemCrafters discord for the code
  (defun colonelpan1k/escape-heading (heading)
    "Remove non-alphanumeric characters from HEADING."
    (replace-regexp-in-string "[^[:alnum:]]+" "-" heading))

  (defun colonelpan1k/export-individual-headings ()
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (org-map-entries (lambda ()
			 (let ((heading (nth 4 (org-heading-components))))
			   (when heading
			     (org-export-to-file 'md (concat (colonelpan1k/escape-heading heading) ".md") nil t))))
		       "LEVEL=1")))

    (define-key org-mode-map (kbd "C-c C-i") 'colonelpan1k/export-individual-headings)
#+end_src
* Org-Babel
** Source Blocks
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (python . t)
     (C . t)
     (haskell . t)))
#+END_SRC
* Centaur Tabs
Centaur tabs are great to have and make navigating lots of open buffers much easier
#+BEGIN_SRC emacs-lisp
  (use-package centaur-tabs
    :demand
    :config
    (centaur-tabs-mode t)
    :bind
    ("C-<" . centaur-tabs-backward)
    ("C->" . centaur-tabs-forward))

  (centaur-tabs-enable-buffer-reordering)
  (centaur-tabs-headline-match)

  (setq centaur-tabs-cycle-scope 'default)
  (setq centaur-tabs-style "chamfer")

  (setq centaur-tabs-height 36)

  (setq centaur-tabs-set-icons t)

  (setq centaur-tabs-gray-out-icons 'buffer)

  (setq centaur-tabs-set-bar 'left)

  (setq centaur-tabs-close-button "X")

  (setq centaur-tabs-set-modified-marker t)
  (setq centaur-tabs-modified-marker "◉")

  (setq centaur-tabs-label-fixed-length 8)

#+END_SRC

* Helm
#+begin_src emacs-lisp
 (use-package helm
  :config
   (require 'helm-config)
  :init
  (helm-mode 1)
  :bind
  (("M-x" . helm-M-x)
    ("C-x C-f" . helm-find-files)
     ("C-x b" . helm-buffers-list)
    ("M-y" . helm-show-kill-ring)
     ("C-s" . helm-occur)
    :map helm-map
    ("<tab>" . helm-execute-persistent-action)))
#+end_src

* Avy
This package makes it a lot easier to jump around a file.
It's a lot easier to use than the default 'M-g g'
#+begin_src emacs-lisp
  (require 'ivy-avy)
  (global-set-key (kbd "C-'") 'avy-goto-line)
  (global-set-key (kbd "C-:") 'avy-goto-char-2)
#+end_src

* Wakatime
#+begin_src emacs-lisp
(require 'wakatime-mode)
(global-wakatime-mode)

#+end_src
